@model ScriptProcessor.Services.BlobFileDetails
@{
    ViewData["Title"] = $"View File - {Model.FileName}";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>
        <i class="bi bi-file-text text-primary me-2"></i>
        @Model.FileName
    </h2>
    <div>
        <a asp-action="List" class="btn btn-secondary">
            <i class="bi bi-arrow-left"></i> Back to Files
        </a>
    </div>
</div>

@if (!string.IsNullOrEmpty(TempData["ErrorMessage"]?.ToString()))
{
    <div class="alert alert-danger" role="alert">
        @TempData["ErrorMessage"]
    </div>
}

@if (!string.IsNullOrEmpty(TempData["SuccessMessage"]?.ToString()))
{
    <div class="alert alert-success" role="alert">
        @TempData["SuccessMessage"]
    </div>
}

<!-- Translation Progress Modal -->
<div class="modal fade" id="translationProgressModal" tabindex="-1" aria-labelledby="translationProgressLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center py-5">
                <div class="mb-4">
                    <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
                <h5 class="mb-3" id="progressStatus">
                    <i class="bi bi-arrow-repeat me-2"></i>Translating...
                </h5>
                <p class="text-muted mb-0">
                    <i class="bi bi-clock me-1"></i>
                    <span id="translationTimer">0.0s</span>
                </p>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!-- File Metadata Panel -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-info-circle me-2"></i>File Information
                </h5>
            </div>
            <div class="card-body">
                <table class="table table-sm table-borderless">
                    <tr>
                        <td><strong>Blob Name:</strong></td>
                        <td><code class="small">@Model.BlobName</code></td>
                    </tr>
                    <tr>
                        <td><strong>File Size:</strong></td>
                        <td>@FormatFileSize(Model.Size)</td>
                    </tr>
                    <tr>
                        <td><strong>Content Type:</strong></td>
                        <td><span class="badge bg-info">@Model.ContentType</span></td>
                    </tr>
                    <tr>
                        <td><strong>Last Modified:</strong></td>
                        <td>@Model.LastModified.ToString("MMM dd, yyyy HH:mm:ss")</td>
                    </tr>
                    <tr>
                        <td><strong>Word Count:</strong></td>
                        <td><span id="wordCount">@CountWords(Model.TextContent)</span></td>
                    </tr>
                </table>
            </div>
        </div>

        @if (Model.Metadata.Any())
        {
            <div class="card mt-3">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-tags me-2"></i>Metadata
                    </h5>
                </div>
                <div class="card-body">
                    <table class="table table-sm table-borderless">
                        @foreach (var meta in Model.Metadata)
                        {
                            <tr>
                                <td><strong>@meta.Key:</strong></td>
                                <td>
                                    @if (meta.Key.ToLower().Contains("id"))
                                    {
                                        <span class="badge bg-secondary">@meta.Value</span>
                                    }
                                    else if (meta.Key.ToLower().Contains("date") || meta.Key.ToLower().Contains("time"))
                                    {
                                        @if (DateTimeOffset.TryParse(meta.Value, out var date))
                                        {
                                            <span>@date.ToString("MMM dd, yyyy HH:mm")</span>
                                        }
                                        else
                                        {
                                            <span>@meta.Value</span>
                                        }
                                    }
                                    else
                                    {
                                        <span>@meta.Value</span>
                                    }
                                </td>
                            </tr>
                        }
                    </table>
                </div>
            </div>
        }

        <!-- Future Extensions Placeholder -->
        <div class="card mt-3">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-gear me-2"></i>Additional Actions
                </h5>
            </div>

            <div class="card-body">
                <form asp-action="ProcessFile" method="post">
                    <input type="hidden" name="selectedFile" value="@Model.BlobName" />
                    <div class="form-group mb-3">
                        <label for="targetLanguage" class="form-label">Target Language:</label>
                        <select id="targetLanguage" name="targetLanguage" class="form-select" required>
                            <option value="">Select language...</option>
                            <option value="French">French</option>
                            <option value="German">German</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-success w-100">
                        <i class="bi bi-gear-fill"></i> Process Translation
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- File Content Panel -->
    <div class="col-md-8">
        <div class="card h-100">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="bi bi-file-earmark-text me-2"></i>File Content
                </h5>
                <div>
                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="copyToClipboard()">
                        <i class="bi bi-clipboard"></i> Copy
                    </button>
                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="toggleWordWrap()">
                        <i class="bi bi-text-wrap"></i> Toggle Wrap
                    </button>

                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="getGlossary()">
                        <i class="bi bi-book"></i> Get Glossary
                    </button>


                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="getSummary()">
                        <i class="bi bi-file-text"></i> Get Summary
                    </button>

                    <button type="button" class="btn btn-sm btn-outline-primary" onclick="processTranslationChain()">
                        <i class="bi bi-arrow-repeat"></i> Translation Chain
                    </button>

                </div>
            </div>

            <!-- Language Tabs -->
            <div class="card-body p-0">
                <ul class="nav nav-tabs" id="languageTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="original-tab" data-bs-toggle="tab" data-bs-target="#original" type="button" role="tab" aria-controls="original" aria-selected="true">
                            <i class="bi bi-file-text me-1"></i>Original
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="summary-tab" data-bs-toggle="tab" data-bs-target="#summary" type="button" role="tab" aria-controls="summary" aria-selected="false">
                            <i class="bi bi-file-text me-1"></i>Summary
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="translation-tab" data-bs-toggle="tab" data-bs-target="#translation" type="button" role="tab" aria-controls="translation" aria-selected="false">
                            <i class="bi bi-translate me-1"></i>Translation
                        </button>
                    </li>
                </ul>

                <div class="tab-content" id="languageTabContent">
                    <!-- Original Content -->
                    <div class="tab-pane fade show active" id="original" role="tabpanel" aria-labelledby="original-tab">
                        <div class="position-relative" style="height: 600px;">
                            <pre id="fileContent" class="h-100 m-0 p-3 overflow-auto content-area" style="white-space: pre-wrap; font-family: 'Consolas', 'Monaco', 'Courier New', monospace; font-size: 14px; line-height: 1.4; background-color: #f8f9fa;"><code>@Model.TextContent</code></pre>
                        </div>
                    </div>

                    <!-- Summary -->
                    <div class="tab-pane fade" id="summary" role="tabpanel" aria-labelledby="summary-tab">
                        <div class="position-relative" style="height: 600px;">
                            <pre id="summaryContent" class="h-100 m-0 p-3 overflow-auto content-area" style="white-space: pre-wrap; font-family: 'Consolas', 'Monaco', 'Courier New', monospace; font-size: 14px; line-height: 1.4; background-color: #f8f9fa;"><code>@(Model.SummaryContent ?? "No summary available")</code></pre>
                        </div>
                    </div>

                    <!-- Translation -->
                    <div class="tab-pane fade" id="translation" role="tabpanel" aria-labelledby="translation-tab">
                        <div class="position-relative" style="height: 600px;">
                            <pre id="translationContent" class="h-100 m-0 p-3 overflow-auto content-area" style="white-space: pre-wrap; font-family: 'Consolas', 'Monaco', 'Courier New', monospace; font-size: 14px; line-height: 1.4; background-color: #f8f9fa;"><code>@(Model.TranslatedContent ?? "No translation available")</code></pre>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card-footer text-muted">
                <small>
                    <i class="bi bi-info-circle me-1"></i>
                    <span id="contentStats">@Model.TextContent.Split('\n').Length lines, @Model.TextContent.Length characters</span>
                </small>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function copyToClipboard() {
            // Get the active tab's content
            const activeTab = document.querySelector('.tab-pane.active pre');
            const content = activeTab.textContent;

            navigator.clipboard.writeText(content).then(function() {
                // Show success feedback
                const btn = event.target.closest('button');
                const originalHTML = btn.innerHTML;
                btn.innerHTML = '<i class="bi bi-check"></i> Copied!';
                btn.classList.remove('btn-outline-secondary');
                btn.classList.add('btn-success');

                setTimeout(function() {
                    btn.innerHTML = originalHTML;
                    btn.classList.remove('btn-success');
                    btn.classList.add('btn-outline-secondary');
                }, 2000);
            }).catch(function(err) {
                console.error('Failed to copy text: ', err);
                alert('Failed to copy to clipboard');
            });
        }

        function toggleWordWrap() {
            // Apply word wrap to all content areas
            const contentAreas = document.querySelectorAll('.content-area');
            const btn = event.target.closest('button');

            contentAreas.forEach(function(content) {
                if (content.style.whiteSpace === 'pre') {
                    content.style.whiteSpace = 'pre-wrap';
                } else {
                    content.style.whiteSpace = 'pre';
                }
            });

            // Update button text
            if (contentAreas[0].style.whiteSpace === 'pre') {
                btn.innerHTML = '<i class="bi bi-text-left"></i> Toggle Wrap';
            } else {
                btn.innerHTML = '<i class="bi bi-text-wrap"></i> Toggle Wrap';
            }
        }

        function getGlossary() {
            // Get the content from the Original tab (English content)
            const originalTabContent = document.querySelector('#original pre code');
            const scriptText = originalTabContent.textContent;

            // Get the selected target language from the form
            const targetLanguageSelect = document.getElementById('targetLanguage');
            const targetLanguage = targetLanguageSelect.value || 'french';

            if (!scriptText || scriptText.trim() === '') {
                alert('No text content found to analyze.');
                return;
            }

            // Update button to show loading state
            const btn = event.target.closest('button');
            const originalHTML = btn.innerHTML;
            btn.innerHTML = '<i class="bi bi-hourglass-split"></i> Processing...';
            btn.disabled = true;

            // Send the request to the controller
            fetch('@Url.Action("GetGlossary", "File")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify({
                    scriptText: scriptText,
                    targetLanguage: targetLanguage.toLowerCase()
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    displayGlossaryResults(data.terms);
                } else {
                    alert('Error: ' + (data.message || 'Failed to retrieve glossary terms'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while processing the glossary request.');
            })
            .finally(() => {
                // Restore button state
                btn.innerHTML = originalHTML;
                btn.disabled = false;
            });
        }

        function displayGlossaryResults(terms) {
            if (!terms || terms.length === 0) {
                alert('No glossary terms found in the text.');
                return;
            }

            // Create a modal or display area for the results
            let resultsHtml = `
                <div class="modal fade" id="glossaryModal" tabindex="-1" aria-labelledby="glossaryModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="glossaryModalLabel">
                                    <i class="bi bi-book me-2"></i>Found Glossary Terms (${terms.length})
                                </h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>English Term</th>
                                                <th>Translation</th>
                                                <th>Count</th>
                                            </tr>
                                        </thead>
                                        <tbody>`;

            terms.forEach(term => {
                resultsHtml += `
                    <tr>
                        <td><strong>${term.englishTerm}</strong></td>
                        <td>${term.translation}</td>
                        <td><span class="badge bg-primary">${term.count}</span></td>
                    </tr>`;
            });

            resultsHtml += `
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>`;

            // Remove existing modal if any
            const existingModal = document.getElementById('glossaryModal');
            if (existingModal) {
                existingModal.remove();
            }

            // Add the new modal to the body
            document.body.insertAdjacentHTML('beforeend', resultsHtml);

            // Show the modal
            const modal = new bootstrap.Modal(document.getElementById('glossaryModal'));
            modal.show();
        }

        function getSummary() {
            const blobName = '@Model.BlobName';

            if (!blobName) {
                alert('No file information available.');
                return;
            }

            // Update button to show loading state
            const btn = event.target.closest('button');
            const originalHTML = btn.innerHTML;
            btn.innerHTML = '<i class="bi bi-hourglass-split"></i> Processing...';
            btn.disabled = true;

            // Send the request to the controller
            fetch('@Url.Action("GetSummary", "File")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify({
                    blobName: blobName
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateSummaryTab(data.summaryText, data.actionItems);
                } else {
                    alert('Error: ' + (data.message || 'Failed to generate summary'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while processing the summary request.');
            })
            .finally(() => {
                // Restore button state
                btn.innerHTML = originalHTML;
                btn.disabled = false;
            });
        }

        function updateSummaryTab(summaryText, actionItems) {
            const summaryContent = document.getElementById('summaryContent').querySelector('code');

            // Combine both summary text and action items
            let combinedContent = '';

            if (summaryText) {
                combinedContent += '=== SUMMARY ===\n\n' + summaryText;
            }

            if (actionItems) {
                if (combinedContent) combinedContent += '\n\n';
                combinedContent += '=== ACTION ITEMS ===\n\n' + actionItems;
            }

            if (!combinedContent) {
                combinedContent = 'No summary content available';
            }

            summaryContent.textContent = combinedContent;

            // Switch to Summary tab to show the result
            const summaryTab = document.getElementById('summary-tab');
            const tab = new bootstrap.Tab(summaryTab);
            tab.show();

            // Update content stats
            updateContentStats();
        }

        function countWords(text) {
            if (!text || text.trim() === '') return 0;
            return text.trim().split(/\s+/).length;
        }

        function updateContentStats() {
            const activeTab = document.querySelector('.tab-pane.active pre code');
            const content = activeTab.textContent;
            const lines = content.split('\n').length;
            const chars = content.length;
            const words = countWords(content);

            document.getElementById('contentStats').textContent = `${lines} lines, ${chars} characters`;
            document.getElementById('wordCount').textContent = words;
        }

        function processTranslationChain() {
            const blobName = '@Model.BlobName';

            // Get the selected target language from the form
            const targetLanguageSelect = document.getElementById('targetLanguage');
            const targetLanguage = targetLanguageSelect.value;

            if (!targetLanguage) {
                alert('Please select a target language first.');
                return;
            }

            // Update button to show loading state
            const btn = event.target.closest('button');
            const originalHTML = btn.innerHTML;
            btn.innerHTML = '<i class="bi bi-hourglass-split"></i> Processing...';
            btn.disabled = true;

            // Show progress modal
            const progressModal = new bootstrap.Modal(document.getElementById('translationProgressModal'));
            progressModal.show();

            // Start timer
            let startTime = Date.now();
            let timerInterval = setInterval(() => {
                const elapsed = ((Date.now() - startTime) / 1000).toFixed(1);
                document.getElementById('translationTimer').textContent = elapsed + 's';
            }, 100);

            // Send the request to the controller
            fetch('@Url.Action("ProcessTranslationChain", "File")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify({
                    blobName: blobName,
                    targetLanguage: targetLanguage
                })
            })
            .then(response => response.json())
            .then(data => {
                // Stop timer
                clearInterval(timerInterval);

                if (data.success) {
                    // Show completion status
                    document.getElementById('progressStatus').innerHTML =
                        '<i class="bi bi-check-circle-fill text-success me-2"></i>Completed!';

                    // Wait a moment to show completion, then close modal
                    setTimeout(() => {
                        progressModal.hide();
                        // Update the translation tab with the translated content
                        updateTranslationTab(data.translatedContent, data.targetLanguage);
                    }, 1000);
                } else {
                    // Show error status
                    document.getElementById('progressStatus').innerHTML =
                        '<i class="bi bi-exclamation-circle-fill text-danger me-2"></i>Failed';

                    setTimeout(() => {
                        progressModal.hide();
                        alert('Error: ' + (data.message || 'Translation chain failed'));
                    }, 1000);
                }
            })
            .catch(error => {
                clearInterval(timerInterval);
                console.error('Error:', error);

                document.getElementById('progressStatus').innerHTML =
                    '<i class="bi bi-exclamation-circle-fill text-danger me-2"></i>Error';

                setTimeout(() => {
                    progressModal.hide();
                    alert('An error occurred while processing the translation chain.');
                }, 1000);
            })
            .finally(() => {
                // Restore button state
                btn.innerHTML = originalHTML;
                btn.disabled = false;

                // Reset modal for next use
                setTimeout(() => {
                    document.getElementById('progressStatus').innerHTML =
                        '<i class="bi bi-arrow-repeat me-2"></i>Translating...';
                    document.getElementById('translationTimer').textContent = '0.0s';
                }, 1500);
            });
        }

        function updateTranslationTab(translatedContent, targetLanguage) {
            const translationContent = document.getElementById('translationContent').querySelector('code');

            if (translatedContent) {
                translationContent.textContent = translatedContent;
            } else {
                translationContent.textContent = 'No translation available';
            }

            // Switch to Translation tab to show the result
            const translationTab = document.getElementById('translation-tab');
            const tab = new bootstrap.Tab(translationTab);
            tab.show();

            // Update content stats
            updateContentStats();
        }

        // Handle tab switching and update stats
        document.addEventListener('DOMContentLoaded', function() {
            const fileName = '@Model.FileName';

            // Add basic syntax highlighting classes to all content areas
            const contentAreas = document.querySelectorAll('.content-area');
            contentAreas.forEach(function(content) {
                if (fileName.endsWith('.json')) {
                    content.classList.add('language-json');
                } else if (fileName.endsWith('.xml')) {
                    content.classList.add('language-xml');
                } else if (fileName.endsWith('.csv')) {
                    content.classList.add('language-csv');
                }
            });

            // Handle tab switching
            const tabButtons = document.querySelectorAll('#languageTabs button[data-bs-toggle="tab"]');
            tabButtons.forEach(function(button) {
                button.addEventListener('shown.bs.tab', function() {
                    updateContentStats();
                });
            });

            // Initial stats update
            updateContentStats();
        });
    </script>
}

@functions {
    private string FormatFileSize(long bytes)
    {
        if (bytes == 0) return "0 B";

        string[] suffixes = { "B", "KB", "MB", "GB" };
        int suffixIndex = 0;
        double size = bytes;

        while (size >= 1024 && suffixIndex < suffixes.Length - 1)
        {
            size /= 1024;
            suffixIndex++;
        }

        return $"{size:F1} {suffixes[suffixIndex]}";
    }

    private int CountWords(string text)
    {
        if (string.IsNullOrWhiteSpace(text)) return 0;
        return text.Trim().Split(new char[] { ' ', '\t', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries).Length;
    }
}