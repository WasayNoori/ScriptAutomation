@model ScriptProcessor.Services.BlobFileDetails
@{
    ViewData["Title"] = $"View File - {Model.FileName}";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>
        <i class="bi bi-file-text text-primary me-2"></i>
        @Model.FileName
    </h2>
    <div>
        <a asp-action="List" class="btn btn-secondary">
            <i class="bi bi-arrow-left"></i> Back to Files
        </a>
    </div>
</div>

<div class="row">
    <!-- File Metadata Panel -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-info-circle me-2"></i>File Information
                </h5>
            </div>
            <div class="card-body">
                <table class="table table-sm table-borderless">
                    <tr>
                        <td><strong>Blob Name:</strong></td>
                        <td><code class="small">@Model.BlobName</code></td>
                    </tr>
                    <tr>
                        <td><strong>File Size:</strong></td>
                        <td>@FormatFileSize(Model.Size)</td>
                    </tr>
                    <tr>
                        <td><strong>Content Type:</strong></td>
                        <td><span class="badge bg-info">@Model.ContentType</span></td>
                    </tr>
                    <tr>
                        <td><strong>Last Modified:</strong></td>
                        <td>@Model.LastModified.ToString("MMM dd, yyyy HH:mm:ss")</td>
                    </tr>
                </table>
            </div>
        </div>

        @if (Model.Metadata.Any())
        {
            <div class="card mt-3">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-tags me-2"></i>Metadata
                    </h5>
                </div>
                <div class="card-body">
                    <table class="table table-sm table-borderless">
                        @foreach (var meta in Model.Metadata)
                        {
                            <tr>
                                <td><strong>@meta.Key:</strong></td>
                                <td>
                                    @if (meta.Key.ToLower().Contains("id"))
                                    {
                                        <span class="badge bg-secondary">@meta.Value</span>
                                    }
                                    else if (meta.Key.ToLower().Contains("date") || meta.Key.ToLower().Contains("time"))
                                    {
                                        @if (DateTimeOffset.TryParse(meta.Value, out var date))
                                        {
                                            <span>@date.ToString("MMM dd, yyyy HH:mm")</span>
                                        }
                                        else
                                        {
                                            <span>@meta.Value</span>
                                        }
                                    }
                                    else
                                    {
                                        <span>@meta.Value</span>
                                    }
                                </td>
                            </tr>
                        }
                    </table>
                </div>
            </div>
        }

        <!-- Future Extensions Placeholder -->
        <div class="card mt-3">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-gear me-2"></i>Additional Actions
                </h5>
            </div>
            <div class="card-body text-muted">
                <!-- Placeholder for future functionality -->
                <p class="small">Additional processing options will be available here in the future.</p>
            </div>
        </div>
    </div>

    <!-- File Content Panel -->
    <div class="col-md-8">
        <div class="card h-100">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="bi bi-file-earmark-text me-2"></i>File Content
                </h5>
                <div>
                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="copyToClipboard()">
                        <i class="bi bi-clipboard"></i> Copy
                    </button>
                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="toggleWordWrap()">
                        <i class="bi bi-text-wrap"></i> Toggle Wrap
                    </button>

                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="toggleWordWrap()">
                        <i class="bi bi-text-wrap"></i> Toggle Wrap
                    </button>
                    
                </div>
            </div>

            <!-- Language Tabs -->
            <div class="card-body p-0">
                <ul class="nav nav-tabs" id="languageTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="original-tab" data-bs-toggle="tab" data-bs-target="#original" type="button" role="tab" aria-controls="original" aria-selected="true">
                            <i class="bi bi-file-text me-1"></i>Original
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="german-tab" data-bs-toggle="tab" data-bs-target="#german" type="button" role="tab" aria-controls="german" aria-selected="false">
                            <i class="bi bi-translate me-1"></i>German
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="french-tab" data-bs-toggle="tab" data-bs-target="#french" type="button" role="tab" aria-controls="french" aria-selected="false">
                            <i class="bi bi-translate me-1"></i>French
                        </button>
                    </li>
                </ul>

                <div class="tab-content" id="languageTabContent">
                    <!-- Original Content -->
                    <div class="tab-pane fade show active" id="original" role="tabpanel" aria-labelledby="original-tab">
                        <div class="position-relative" style="height: 600px;">
                            <pre id="fileContent" class="h-100 m-0 p-3 overflow-auto content-area" style="white-space: pre-wrap; font-family: 'Consolas', 'Monaco', 'Courier New', monospace; font-size: 14px; line-height: 1.4; background-color: #f8f9fa;"><code>@Model.TextContent</code></pre>
                        </div>
                    </div>

                    <!-- German Translation -->
                    <div class="tab-pane fade" id="german" role="tabpanel" aria-labelledby="german-tab">
                        <div class="position-relative" style="height: 600px;">
                            <pre id="germanContent" class="h-100 m-0 p-3 overflow-auto content-area" style="white-space: pre-wrap; font-family: 'Consolas', 'Monaco', 'Courier New', monospace; font-size: 14px; line-height: 1.4; background-color: #f8f9fa;"><code>@(Model.GermanTranslation ?? "No German translation available")</code></pre>
                        </div>
                    </div>

                    <!-- French Translation -->
                    <div class="tab-pane fade" id="french" role="tabpanel" aria-labelledby="french-tab">
                        <div class="position-relative" style="height: 600px;">
                            <pre id="frenchContent" class="h-100 m-0 p-3 overflow-auto content-area" style="white-space: pre-wrap; font-family: 'Consolas', 'Monaco', 'Courier New', monospace; font-size: 14px; line-height: 1.4; background-color: #f8f9fa;"><code>@(Model.FrenchTranslation ?? "No French translation available")</code></pre>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card-footer text-muted">
                <small>
                    <i class="bi bi-info-circle me-1"></i>
                    <span id="contentStats">@Model.TextContent.Split('\n').Length lines, @Model.TextContent.Length characters</span>
                </small>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function copyToClipboard() {
            // Get the active tab's content
            const activeTab = document.querySelector('.tab-pane.active pre');
            const content = activeTab.textContent;

            navigator.clipboard.writeText(content).then(function() {
                // Show success feedback
                const btn = event.target.closest('button');
                const originalHTML = btn.innerHTML;
                btn.innerHTML = '<i class="bi bi-check"></i> Copied!';
                btn.classList.remove('btn-outline-secondary');
                btn.classList.add('btn-success');

                setTimeout(function() {
                    btn.innerHTML = originalHTML;
                    btn.classList.remove('btn-success');
                    btn.classList.add('btn-outline-secondary');
                }, 2000);
            }).catch(function(err) {
                console.error('Failed to copy text: ', err);
                alert('Failed to copy to clipboard');
            });
        }

        function toggleWordWrap() {
            // Apply word wrap to all content areas
            const contentAreas = document.querySelectorAll('.content-area');
            const btn = event.target.closest('button');

            contentAreas.forEach(function(content) {
                if (content.style.whiteSpace === 'pre') {
                    content.style.whiteSpace = 'pre-wrap';
                } else {
                    content.style.whiteSpace = 'pre';
                }
            });

            // Update button text
            if (contentAreas[0].style.whiteSpace === 'pre') {
                btn.innerHTML = '<i class="bi bi-text-left"></i> Toggle Wrap';
            } else {
                btn.innerHTML = '<i class="bi bi-text-wrap"></i> Toggle Wrap';
            }
        }

        function updateContentStats() {
            const activeTab = document.querySelector('.tab-pane.active pre code');
            const content = activeTab.textContent;
            const lines = content.split('\n').length;
            const chars = content.length;
            document.getElementById('contentStats').textContent = `${lines} lines, ${chars} characters`;
        }

        // Handle tab switching and update stats
        document.addEventListener('DOMContentLoaded', function() {
            const fileName = '@Model.FileName';

            // Add basic syntax highlighting classes to all content areas
            const contentAreas = document.querySelectorAll('.content-area');
            contentAreas.forEach(function(content) {
                if (fileName.endsWith('.json')) {
                    content.classList.add('language-json');
                } else if (fileName.endsWith('.xml')) {
                    content.classList.add('language-xml');
                } else if (fileName.endsWith('.csv')) {
                    content.classList.add('language-csv');
                }
            });

            // Handle tab switching
            const tabButtons = document.querySelectorAll('#languageTabs button[data-bs-toggle="tab"]');
            tabButtons.forEach(function(button) {
                button.addEventListener('shown.bs.tab', function() {
                    updateContentStats();
                });
            });

            // Initial stats update
            updateContentStats();
        });
    </script>
}

@functions {
    private string FormatFileSize(long bytes)
    {
        if (bytes == 0) return "0 B";
        
        string[] suffixes = { "B", "KB", "MB", "GB" };
        int suffixIndex = 0;
        double size = bytes;
        
        while (size >= 1024 && suffixIndex < suffixes.Length - 1)
        {
            size /= 1024;
            suffixIndex++;
        }
        
        return $"{size:F1} {suffixes[suffixIndex]}";
    }
}